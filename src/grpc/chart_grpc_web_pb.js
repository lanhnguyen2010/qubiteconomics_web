/**
 * @fileoverview gRPC-Web generated client stub for chart_data
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: chart.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.chart_data = require('./chart_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chart_data.ChartServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chart_data.ChartServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.VN30PSRequest,
 *   !proto.chart_data.VN30PSResponse>}
 */
const methodDescriptor_ChartService_VN30PS = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/VN30PS',
  grpc.web.MethodType.UNARY,
  proto.chart_data.VN30PSRequest,
  proto.chart_data.VN30PSResponse,
  /**
   * @param {!proto.chart_data.VN30PSRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.VN30PSResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.VN30PSRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.VN30PSResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.VN30PSResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.vN30PS =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/VN30PS',
      request,
      metadata || {},
      methodDescriptor_ChartService_VN30PS,
      callback);
};


/**
 * @param {!proto.chart_data.VN30PSRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.VN30PSResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.vN30PS =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/VN30PS',
      request,
      metadata || {},
      methodDescriptor_ChartService_VN30PS);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.FBFSRequest,
 *   !proto.chart_data.FBFSResponse>}
 */
const methodDescriptor_ChartService_FBFS = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/FBFS',
  grpc.web.MethodType.UNARY,
  proto.chart_data.FBFSRequest,
  proto.chart_data.FBFSResponse,
  /**
   * @param {!proto.chart_data.FBFSRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.FBFSResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.FBFSRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.FBFSResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.FBFSResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.fBFS =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/FBFS',
      request,
      metadata || {},
      methodDescriptor_ChartService_FBFS,
      callback);
};


/**
 * @param {!proto.chart_data.FBFSRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.FBFSResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.fBFS =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/FBFS',
      request,
      metadata || {},
      methodDescriptor_ChartService_FBFS);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.RollingBUSDRequest,
 *   !proto.chart_data.RollingBUSDResponse>}
 */
const methodDescriptor_ChartService_RollingBUSD = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/RollingBUSD',
  grpc.web.MethodType.UNARY,
  proto.chart_data.RollingBUSDRequest,
  proto.chart_data.RollingBUSDResponse,
  /**
   * @param {!proto.chart_data.RollingBUSDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.RollingBUSDResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.RollingBUSDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.RollingBUSDResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.RollingBUSDResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.rollingBUSD =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/RollingBUSD',
      request,
      metadata || {},
      methodDescriptor_ChartService_RollingBUSD,
      callback);
};


/**
 * @param {!proto.chart_data.RollingBUSDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.RollingBUSDResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.rollingBUSD =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/RollingBUSD',
      request,
      metadata || {},
      methodDescriptor_ChartService_RollingBUSD);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.NetBUSDRequest,
 *   !proto.chart_data.NetBUSDResponse>}
 */
const methodDescriptor_ChartService_NetBUSD = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/NetBUSD',
  grpc.web.MethodType.UNARY,
  proto.chart_data.NetBUSDRequest,
  proto.chart_data.NetBUSDResponse,
  /**
   * @param {!proto.chart_data.NetBUSDRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.NetBUSDResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.NetBUSDRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.NetBUSDResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.NetBUSDResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.netBUSD =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/NetBUSD',
      request,
      metadata || {},
      methodDescriptor_ChartService_NetBUSD,
      callback);
};


/**
 * @param {!proto.chart_data.NetBUSDRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.NetBUSDResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.netBUSD =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/NetBUSD',
      request,
      metadata || {},
      methodDescriptor_ChartService_NetBUSD);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.ForeignPSRequest,
 *   !proto.chart_data.ForeignPSResponse>}
 */
const methodDescriptor_ChartService_ForeignPS = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/ForeignPS',
  grpc.web.MethodType.UNARY,
  proto.chart_data.ForeignPSRequest,
  proto.chart_data.ForeignPSResponse,
  /**
   * @param {!proto.chart_data.ForeignPSRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.ForeignPSResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.ForeignPSRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.ForeignPSResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.ForeignPSResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.foreignPS =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/ForeignPS',
      request,
      metadata || {},
      methodDescriptor_ChartService_ForeignPS,
      callback);
};


/**
 * @param {!proto.chart_data.ForeignPSRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.ForeignPSResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.foreignPS =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/ForeignPS',
      request,
      metadata || {},
      methodDescriptor_ChartService_ForeignPS);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chart_data.BidAskPSRequest,
 *   !proto.chart_data.BidAskPSResponse>}
 */
const methodDescriptor_ChartService_BidAskPS = new grpc.web.MethodDescriptor(
  '/chart_data.ChartService/BidAskPS',
  grpc.web.MethodType.UNARY,
  proto.chart_data.BidAskPSRequest,
  proto.chart_data.BidAskPSResponse,
  /**
   * @param {!proto.chart_data.BidAskPSRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chart_data.BidAskPSResponse.deserializeBinary
);


/**
 * @param {!proto.chart_data.BidAskPSRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chart_data.BidAskPSResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chart_data.BidAskPSResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chart_data.ChartServiceClient.prototype.bidAskPS =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chart_data.ChartService/BidAskPS',
      request,
      metadata || {},
      methodDescriptor_ChartService_BidAskPS,
      callback);
};


/**
 * @param {!proto.chart_data.BidAskPSRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chart_data.BidAskPSResponse>}
 *     Promise that resolves to the response
 */
proto.chart_data.ChartServicePromiseClient.prototype.bidAskPS =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chart_data.ChartService/BidAskPS',
      request,
      metadata || {},
      methodDescriptor_ChartService_BidAskPS);
};


module.exports = proto.chart_data;

